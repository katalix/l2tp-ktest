#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Test suite for Linux Kernel L2TP code
#
# Depends on iproute2 with l2tp support
#

readonly KMEMLEAK=/sys/kernel/debug/kmemleak

DO_KMODREFLEAK_CHECK=0
DO_KMEMLEAK_CHECK=0
TESTCASES=
CHECK_COUNT=0
CHECK_FAIL=0
EXIT_ON_FIRST_ERROR=0
VERBOSE=0

log() { echo "[$(date)] $@"; }
err() { log "ERROR: $@" 1>&2; false; }
die() { log "FATAL: $@" 1>&2; exit 1; }
dbg() { test $VERBOSE -ne 0 && log "$@"; }

KMODREFLEAK_BEFORE=""
kmodrefleak_setup()
{
    if test 1 -eq $DO_KMODREFLEAK_CHECK -o "$1" = "force"
    then
        KMODREFLEAK_BEFORE="$(lsmod | grep l2tp)"
    fi
}

kmodrefleak_check()
{
    local ret=0
    if test 1 -eq $DO_KMODREFLEAK_CHECK -o "$1" = "force"
    then
        # wait for netdev shutdown grace period before testing module refcounts
        sleep 2
        diff -u <( echo "$KMODREFLEAK_BEFORE" ) <( lsmod | grep l2tp ) || ret=1
    fi
    return $ret
}

runtest()
{
    local ret=0

    kmodrefleak_setup
    kmemleak_clear
    type pre_$1 &> /dev/null && pre_$1

    $1
    ret=$?

    type post_$1 &> /dev/null && post_$1
    kmemleak_check || {
        err "kernel memory leak detected for testcase $1"
        cat $KMEMLEAK
    }

    test $ret -eq 0 && kmodrefleak_check || ret=1
    return $ret
}

report_and_exit() {
    local ntests=$1
    local check_count=$2
    local nfails=$3
    local exit_code=$4
    local reason=""
    test $exit_code -eq 0 || reason="(aborted)"
    log "Summary: $ntests testcases run ($check_count checks), of which $nfails failed $reason"
    exit $exit_code
}

check()
{
    dbg "$@"
    CHECK_COUNT=$((CHECK_COUNT+1))
    if ! $@
    then
        err "$@ failed on line ${BASH_LINENO[0]} in ${FUNCNAME[1]}"
        CHECK_FAIL=$((CHECK_FAIL+1))
        test $EXIT_ON_FIRST_ERROR -eq 0 || report_and_exit $ntests $CHECK_COUNT 1 1
        false
    fi
}

# ip l2tp wrappers
count_tunnels() { ip l2tp show tunnel | grep -c ^Tunnel; }
count_sessions() { ip l2tp show session | grep -e " in tunnel $1" | grep -c ^Session; }
count_all_sessions() { ip l2tp show session | grep " in tunnel " | grep -c ^Session; }
get_tunnel_ids() { ip l2tp show tunnel | awk '/^Tun/ { gsub(/,/, ""); print $2; }'; }
get_session_ids() { ip l2tp show session | grep -e " in tunnel $1" | awk '/^Session/ { gsub(/,/, ""); print $2; }'; }
is_tunnel() { local i; for i in $(get_tunnel_ids); do if test $i -eq $1; then return 0; fi; done; return 1; }
delay_no_tunnel() {
    local i=0
    # some kernels seem to lag on tunnel destroy, so let's try to account for that
    while ( test $(count_tunnels) -ne 0 || $(ip link show | grep -q l2tpeth) || $(ip link show | grep -q ppp) ) && \
              test $i -lt 20; do sleep 0.2s; i=$((i+1)); done
}
close_tunnel() {
    local i=0
    ip l2tp del tunnel tunnel_id $1 || return $?
    local s; for s in $(get_session_ids $1); do ip l2tp del session tunnel_id $1 session_id $s; done
    # some kernels seem to lag on tunnel destroy, so let's try to account for that
    while is_tunnel $1 && test $i -lt 20; do sleep 0.2s; i=$((i+1)); done
}

# kmemleak wrappers
kmemleak_clear()
{
    if test 1 -eq $DO_KMEMLEAK_CHECK && test -f $KMEMLEAK
    then
        /bin/echo clear > $KMEMLEAK
    fi
}

kmemleak_check()
{
    if test 1 -eq $DO_KMEMLEAK_CHECK && test -f $KMEMLEAK
    then
        /bin/echo scan > $KMEMLEAK
        test 0 -eq $(wc -l $KMEMLEAK | cut -d" " -f1)
    else
        return 0
    fi
}

# version-specifics
current_kernel_version() { awk '/^Linux version/ { split($3, a, /\./); gsub(/[^0-9].*$/, "",a[3]); print a[1], a[2], a[3] }' /proc/version; }
kernel_version() { echo $(( ($1 << 16) + ($2 << 8) + $3 )); }

have_ipv6() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 3 5 0); }
have_l2tpip_ipv6() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 3 8 0); }
have_ipv6_peer() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 3 11 0); }
have_ip_netns() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 3 8 0); }
have_udp_encap_destroy() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 3 9 0); }
have_l2tp_ac_pppoe() { ./kernel_has_pppiobridgechan -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c > /dev/null 2>&1; }
have_consistent_l2tp_stats() { test $(kernel_version $(current_kernel_version)) -ge $(kernel_version 5 10 0); }
have_l2tp_icmp_error_handling() { test $(kernel_version $(current_kernel_version)) -lt $(kernel_version 5 11 0); }

# Tunnel / session lifetimes

# $1 -- version
# $2 -- create api
# $3 -- delete api
# $4 -- encap
# $5 -- family
# $6 -- optional pw type (no pw if not defined)
managed_tunl_check()
{
    local pw=""
    test -n "$6" && pw="-p $6"

    # Note that older kernels w/o the udp encap_destroy hook are not
    # able to successfully close l2tp tunnel contexts in the kernel
    # on close of the userspace socket.

    # Make sure we don't have any tunnels to start off with
    check test $(count_tunnels) -eq 0

    # App exit without closing the tunnel should result in tunnel delete
    check $(dirname $0)/kcreate -v $1 -m -n -c $2 -d $3 -e $4 -f $5 $pw
    delay_no_tunnel
    test $HAVE_UDP_ENCAP_DESTROY -eq 1 && check test $(count_tunnels) -eq 0

    # Force close any extant tunnels: they should close when asked with
    # iproute or it's a failure.
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    check test $(count_tunnels) -eq 0
    test $(count_tunnels) -eq 0 || report_and_exit $ntests $CHECK_COUNT 1 1

    # App exit after closing the tunnel should result in tunnel delete,
    # *unless* we're using socket close for a kernel w/o the
    # udp encap_destroy hook
    check $(dirname $0)/kcreate -v $1 -m -c $2 -d $3 -e $4 -f $5 $pw
    delay_no_tunnel
    if test $HAVE_UDP_ENCAP_DESTROY -eq 1 || test $3 = "netlink"
    then
        check test $(count_tunnels) -eq 0
    fi

    # Close any tunnels still around
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    test $(count_tunnels) -eq 0 || report_and_exit $ntests $CHECK_COUNT 1 1
}

# $1 -- version
# $2 -- create api
# $3 -- delete api
# $4 -- encap
# $5 -- family
# $6 -- optional pw type (no pw if not defined)
unmanaged_tunl_check()
{
    local pw=""
    test -n "$6" && pw="-p $6"

    # Make sure we don't have any tunnels to start off with
    check test $(count_tunnels) -eq 0

    # App exit without closing the tunnel should not result in tunnel delete
    check $(dirname $0)/kcreate -v $1 -n -c $2 -d $3 -e $4 -f $5 $pw
    check test $(count_tunnels) -eq 1

    # Close the newly created tunnel(s)
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    check test $(count_tunnels) -eq 0
    delay_no_tunnel
    
    # App exit after closing the tunnel should result in tunnel delete
    check $(dirname $0)/kcreate -v $1 -c $2 -d $3 -e $4 -f $5 $pw
    delay_no_tunnel
    check test $(count_tunnels) -eq 0

    # Close any tunnels still around
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    test $(count_tunnels) -eq 0 || report_and_exit $ntests $CHECK_COUNT 1 1
}

# $1 -- encap
# $2 -- family
# $3 -- pseudowire
v3_tunl_check()
{
    # We should be able to destroy a managed tunnel using both the socket
    # and the netlink APIs
    managed_tunl_check 3 netlink netlink "$1" "$2" "$3"
    managed_tunl_check 3 netlink socket "$1" "$2" "$3"

    # In the special case of PPP pseudowires, there is a socket API for
    # tunnel and session creation, so check all permutations of that
    if test "$3" = "ppp" && test "$1" = "udp"
    then
        managed_tunl_check 3 socket netlink "$1" "$2" "$3"
        managed_tunl_check 3 socket socket "$1" "$2" "$3"
    fi

    # Unmanaged tunnels are only accessible via the netlink API
    unmanaged_tunl_check 3 netlink netlink "$1" "$2" "$3"
}

# L2TPv2 is UDP encap, PPP pw only
# $1 -- family
# $2 -- pseudowire
v2_tunl_check()
{
    # We should be able to create/destroy a managed tunnel using both the
    # socket and the netlink APIs
    managed_tunl_check 2 netlink netlink udp "$1" "$2"
    managed_tunl_check 2 netlink socket udp "$1" "$2"
    managed_tunl_check 2 socket netlink udp "$1" "$2"
    managed_tunl_check 2 socket socket udp "$1" "$2"

    # Unmanaged v2 tunnels aren't allowed
}

# $1 -- L2TP version
# $2 -- family
# $3 -- encap
# $4 -- pseudowire
# $5 -- cookie_len
session_data_check()
{
    local opts=""
    test $HAVE_CONSISTENT_L2TP_STATS -eq 1 && opts="$opts -s"
    test $VERBOSE -eq 1 && opts="$opts -v"
    check $(dirname $0)/netns_datapath $opts datapath $@
}

# $1 -- family
# $2 -- encap
# $3 -- pseudowire
# $4 -- cookie_len
# $5 -- bad_cookie_len
cookie_mismatch_check()
{
    local opts=""
    test $HAVE_CONSISTENT_L2TP_STATS -eq 1 && opts="$opts -s"
    test $VERBOSE -eq 1 && opts="$opts -v"
    $(dirname $0)/netns_datapath $opts cookie_mismatch $@
}

# $1 -- L2TP version
# $2 -- family
# $3 -- encap
# $4 -- pseudowire
data_shutdown_check()
{
    local opts=""
    test $HAVE_CONSISTENT_L2TP_STATS -eq 1 && opts="$opts -s"
    test $VERBOSE -eq 1 && opts="$opts -v"
    check $(dirname $0)/netns_datapath $opts data_shutdown $@
}

# $1 -- L2TP version
# $2 -- family
# $3 -- encap
# $4 -- pseudowire
# $5 -- create extra tunnels or sessions
data_perf_check()
{
    local rate
    local opts=""
    test $VERBOSE -eq 1 && opts="$opts -v"
    if check $(dirname $0)/netns_datapath $opts datapath_perf $@
    then
        rate=$(cat data_perf_check.txt | numfmt --to=si)
        echo "l2tpv${1} $2 $3 $4 $5: ${rate}bps"
    fi
}

# $1 -- L2TP version
# $2 -- family
# $3 -- encap
ac_pppoe_data_check()
{
    local opts=""
    test $HAVE_CONSISTENT_L2TP_STATS -eq 1 && opts="$opts -s"
    test $VERBOSE -eq 1 && opts="$opts -v"
    check $(dirname $0)/netns_datapath $opts ac_pppoe $@
}

# Tunnel and session ID scope

# $1 -- version1
# $2 -- version2
# $3 -- encap1
# $4 -- encap2
scope_tunnel_id_check()
{
    $(dirname $0)/kcreate -v $1 -n -e $3 -T 1 -t 1
    $(dirname $0)/kcreate -v $2 -n -e $4 -T 1 -t 1
    check test $(count_tunnels) -eq 1

    # Close the newly created tunnel(s)
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    check test $(count_tunnels) -eq 0
    delay_no_tunnel
}

# $1 -- version1
# $2 -- version2
# $3 -- encap1
# $4 -- encap2
scope_session_id_check()
{
    test $1 -eq 2 && pw1=ppp || pw1=eth
    test $2 -eq 2 && pw2=ppp || pw2=eth

    # Session IDs are scoped by protocol version
    # For L2TPv3 UDP encap, session ID collisions are supported.
    # If a session already exists in an IP-encap tunnel, a colliding UDP
    # session will fail.
    nsessions_expected=2
    test $1 -eq $2 && nsessions_expected=1
    test $3 = udp && nsessions_expected=2
    test $3 = ip && nsessions_expected=1
    test $1 -eq 3 -a $4 = ip && nsessions_expected=1

    $(dirname $0)/kcreate -v $1 -I -e $3 -p $pw1 -T 1 -t 1 -S 1 -s 1 \
                 -L 127.0.0.1/5555 -P 127.0.0.1/5556 &
    pid1=$!
    $(dirname $0)/kcreate -v $2 -I -e $4 -p $pw2 -T 2 -t 2 -S 1 -s 1 \
                 -L 127.0.0.1/5557 -P 127.0.0.1/5558 &
    pid2=$!
    sleep 0.2s
    check test $(count_all_sessions) -eq $nsessions_expected

    # Close the newly created tunnel(s)
    for i in $(get_tunnel_ids); do check close_tunnel $i; done
    check test $(count_tunnels) -eq 0
    delay_no_tunnel
    kill $pid1 $pid2 2> /dev/null
}

#
# Entry point
#

log "Kernel $(current_kernel_version) ($(kernel_version $(current_kernel_version)))"

# Check if IPv6 present
have_ipv6 && HAVE_IPV6=1 || HAVE_IPV6=0
test $HAVE_IPV6 -eq 1 && log "Have IPv6" || log "Have no IPv6"

# Check if L2TP IPv6 is supported
have_l2tpip_ipv6 && HAVE_L2TPIP_IPV6=1 || HAVE_L2TPIP_IPV6=0
test $HAVE_L2TPIP_IPV6 -eq 1 && log "Have L2TP IP encap IPv6" || log "Have no L2TP IP encap IPv6"

# Check if IPv6 peer address is supported
have_ipv6_peer && HAVE_IPV6_PEER=1 || HAVE_IPV6_PEER=0
test $HAVE_IPV6_PEER -eq 1 && log "Have IPv6 peer_addr" || log "Have no IPv6 peer_addr"

# Check if network namespace is supported (lo interface in separate namespace)
have_ip_netns && HAVE_IP_NETNS=1 || HAVE_IP_NETNS=0
test $HAVE_IP_NETNS -eq 1 && log "Have net namespaces" || log "Have no net namespaces"

# Check whether kernel supports the UDP socket destructor hook
have_udp_encap_destroy && HAVE_UDP_ENCAP_DESTROY=1 || HAVE_UDP_ENCAP_DESTROY=0
test $HAVE_UDP_ENCAP_DESTROY -eq 1 && log "Have UDP encap_destroy hook" || log "Have no UDP encap_destroy hook"

# Check whether kernel has consistent L2TP rx/tx dataplane stats
have_consistent_l2tp_stats && HAVE_CONSISTENT_L2TP_STATS=1 || HAVE_CONSISTENT_L2TP_STATS=0
test $HAVE_CONSISTENT_L2TP_STATS -eq 1 && log "Have consistent L2TP stats" || log "Have inconsistent L2TP stats, disabling stats checks"

# Check whether kernel has L2TP socket ICMP handling
have_l2tp_icmp_error_handling && HAVE_L2TP_ICMP_ERROR_HANDLING=1 || HAVE_L2TP_ICMP_ERROR_HANDLING=0
test $HAVE_L2TP_ICMP_ERROR_HANDLING -eq 1 && log "Have L2TP ICMP error handling" || log "Have no L2TP ICMP error handling"

# PPP channel bridge tests require the name of a local Ethernet interface
ETH_IFNAME=$(ip link | \
    awk '/^[0-9]+:/ { gsub(/:/, "", $2); ifname=$2 }
         /link\/ether/ { print ifname; f=1; exit }
         END { exit f?0:1 }') || die "Can't locate Ethernet interface"
log "Have Ethernet interface $ETH_IFNAME"

# Check whether kernel supports the PPP channel bridge ioctls
have_l2tp_ac_pppoe && HAVE_PPP_CHANNEL_BRIDGE=1 || HAVE_PPP_CHANNEL_BRIDGE=0
test $HAVE_PPP_CHANNEL_BRIDGE -eq 1 && log "Have PPP channel bridge ioctls" || log "Have no PPP channel bridge ioctls"

# L2TPv2, IPv4
tc_api_v2_inet_nopw() { v2_tunl_check inet; }
tc_api_v2_inet_ppp() { v2_tunl_check inet ppp; }
if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
then
    tc_api_v2_inet_pppac() { v2_tunl_check inet "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
fi

# L2TPv2, IPv6
if test $HAVE_IPV6 -eq 1
then
    tc_api_v2_inet6_nopw() { v2_tunl_check inet6; }
    tc_api_v2_inet6_ppp() { v2_tunl_check inet6 ppp; }
    if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
    then
        tc_api_v2_inet6_pppac() { v2_tunl_check inet6 "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
    fi
fi

# L2TPv3, UDP encap, IPv4
tc_api_v3_udp_inet_nopw() { v3_tunl_check udp inet; }
tc_api_v3_udp_inet_eth() { v3_tunl_check udp inet eth; }
tc_api_v3_udp_inet_ppp() { v3_tunl_check udp inet ppp; }
if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
then
    tc_api_v3_inet_pppac() { v3_tunl_check udp inet "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
fi

# L2TPv3, IP encap, IPv4
tc_api_v3_ip_inet_nopw() { v3_tunl_check ip inet; }
tc_api_v3_ip_inet_eth() { v3_tunl_check ip inet eth; }
tc_api_v3_ip_inet_ppp() { v3_tunl_check ip inet ppp; }
if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
then
    tc_api_v3_ip_inet_pppac() { v3_tunl_check ip inet "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
fi

# L2TPv3, UDP encap, IPv6
if test $HAVE_IPV6 -eq 1
then
    tc_api_v3_udp_inet6_nopw() { v3_tunl_check udp inet6; }
    tc_api_v3_udp_inet6_eth() { v3_tunl_check udp inet6 eth; }
    tc_api_v3_udp_inet6_ppp() { v3_tunl_check udp inet6 ppp; }
    if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
    then
        tc_api_v3_udp_inet6_pppac() { v3_tunl_check udp inet6 "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
    fi
fi

# L2TPv3, IP encap, IPv6
if test $HAVE_L2TPIP_IPV6 -eq 1
then
    tc_api_v3_ip_inet6_nopw() { v3_tunl_check ip inet6; }
    tc_api_v3_ip_inet6_eth() { v3_tunl_check ip inet6 eth; }
    tc_api_v3_ip_inet6_ppp() { v3_tunl_check ip inet6 ppp; }
    if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
    then
        tc_api_v3_ip_inet6_pppac() { v3_tunl_check ip inet6 "pppac -N $ETH_IFNAME -i 1234 -M 04:7d:7b:da:23:9c"; }
    fi
fi

if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
then
    tc_api_ppp_channel_bridge() {
        check $(dirname $0)/ppp_bridge_api -N $ETH_IFNAME -i 5102 -M 04:7d:7b:da:23:9c
    }
fi

# $1 -- family
# $2 -- with msg_errqueue
# $3 -- l2tp version
# $4 -- encap
do_icmp_error_handling_validation()
{
    local msg_errqueue=""
    local l2tp=""
    local encap=""

    test -n "$2" && test "$2" -eq 1 && msg_errqueue="-m"
    test -n "$3" && test "$3" -eq 2 && l2tp="-v 2"
    test -n "$3" && test "$3" -eq 3 && l2tp="-v 3"
    test -n "$4" && encap="-e $4"

    check $(dirname $0)/icmp_errors -f $1 $msg_errqueue $encap $l2tp
}

tc_api_icmp_inet() { do_icmp_error_handling_validation inet; }
tc_api_icmp_inet_msgerrqueue() { do_icmp_error_handling_validation inet 1; }

tc_api_icmp_inet6() { do_icmp_error_handling_validation inet6; }
tc_api_icmp_inet6_msgerrqueue() { do_icmp_error_handling_validation inet6 1; }

if test $HAVE_L2TP_ICMP_ERROR_HANDLING -eq 1
then
    tc_api_icmp_l2tp_v2_udp_inet() { do_icmp_error_handling_validation inet 0 2 udp; }
    tc_api_icmp_l2tp_v2_udp_inet6() { do_icmp_error_handling_validation inet6 0 2 udp; }
    tc_api_icmp_l2tp_v2_udp_inet_msgerrqueue() { do_icmp_error_handling_validation inet 1 2 udp; }
    tc_api_icmp_l2tp_v2_udp_inet6_msgerrqueue() { do_icmp_error_handling_validation inet6 1 2 udp; }

    tc_api_icmp_l2tp_v3_udp_inet() { do_icmp_error_handling_validation inet 0 3 udp; }
    tc_api_icmp_l2tp_v3_udp_inet6() { do_icmp_error_handling_validation inet6 0 3 udp; }
    tc_api_icmp_l2tp_v3_ip_inet() { do_icmp_error_handling_validation inet 0 3 ip; }
    tc_api_icmp_l2tp_v3_ip_inet6() { do_icmp_error_handling_validation inet6 0 3 ip; }

    tc_api_icmp_l2tp_v3_udp_inet_msgerrqueue() { do_icmp_error_handling_validation inet 1 3 udp; }
    tc_api_icmp_l2tp_v3_udp_inet6_msgerrqueue() { do_icmp_error_handling_validation inet6 1 3 udp; }
    tc_api_icmp_l2tp_v3_ip_inet_msgerrqueue() { do_icmp_error_handling_validation inet 1 3 ip; }
    tc_api_icmp_l2tp_v3_ip_inet6_msgerrqueue() { do_icmp_error_handling_validation inet6 1 3 ip; }
fi

# $1 -- mode - delete or query
# $2 -- family
# $3 -- encap
do_tunnel_delete_or_query_race()
{
    local mode="$1"
    local family="$2"
    local encap="$3"
    local i=

    check test $(count_tunnels) -eq 0

    for i in 1 2 3 4 5
    do
        delay_no_tunnel
        OPT_SILENT=1 check $(dirname $0)/tunl_${mode}_race -f $family -e $encap -c 150
    done

    delay_no_tunnel
    check test $(count_tunnels) -eq 0
}

# Tunnel delete with userspace thread races
if test $HAVE_UDP_ENCAP_DESTROY -eq 1
then
    tc_race_delete_inet_udp() { do_tunnel_delete_or_query_race delete inet udp; }
    tc_race_delete_inet6_udp() { do_tunnel_delete_or_query_race delete inet6 udp; }
fi
tc_race_delete_inet_ip() { do_tunnel_delete_or_query_race delete inet ip; }
if test $HAVE_L2TPIP_IPV6 -eq 1
then
    tc_race_delete_inet6_ip() { do_tunnel_delete_or_query_race delete inet6 ip; }
fi

# Tunnel query with userspace thread races
if test $HAVE_UDP_ENCAP_DESTROY -eq 1
then
    tc_race_query_inet_udp() { do_tunnel_delete_or_query_race query inet udp; }
    tc_race_query_inet6_udp() { do_tunnel_delete_or_query_race query inet6 udp; }
fi
tc_race_query_inet_ip() { do_tunnel_delete_or_query_race query inet ip; }
if test $HAVE_L2TPIP_IPV6 -eq 1
then
    tc_race_query_inet6_ip() { do_tunnel_delete_or_query_race query inet6 ip; }
fi

# Datapath tests require lo interfaces configurable per namespace
if test $HAVE_IP_NETNS -eq 1
then
    tc_data_v2_inet_udp_ppp() { session_data_check 2 inet udp ppp 0; }

    tc_data_v3_inet_udp_ppp() { session_data_check 3 inet udp ppp 0; }
    tc_data_v3_inet_udp_ppp_cookie4() { session_data_check 3 inet udp ppp 4; }
    tc_data_v3_inet_udp_ppp_cookie8() { session_data_check 3 inet udp ppp 8; }

    tc_data_v3_inet_udp_eth() { session_data_check 3 inet udp eth 0; }
    tc_data_v3_inet_udp_eth_cookie4() { session_data_check 3 inet udp eth 4; }
    tc_data_v3_inet_udp_eth_cookie8() { session_data_check 3 inet udp eth 8; }

    tc_data_v3_inet_ip_ppp() { session_data_check 3 inet ip ppp 0; }
    tc_data_v3_inet_ip_ppp_cookie4() { session_data_check 3 inet ip ppp 4; }
    tc_data_v3_inet_ip_ppp_cookie8() { session_data_check 3 inet ip ppp 8; }

    tc_data_v3_inet_ip_eth() { session_data_check 3 inet ip eth 0; }
    tc_data_v3_inet_ip_eth_cookie4() { session_data_check 3 inet ip eth 4; }
    tc_data_v3_inet_ip_eth_cookie8() { session_data_check 3 inet ip eth 8; }

    tc_cookie_mismatch_v3_inet_udp_cookie4() { cookie_mismatch_check inet udp eth 4 4; }
    tc_cookie_mismatch_v3_inet_udp_cookie8() { cookie_mismatch_check inet udp eth 8 8; }
    tc_cookie_mismatch_v3_inet_udp_no_peer_cookie() { cookie_mismatch_check inet udp eth 0 4; }

    tc_cookie_mismatch_v3_inet_ip_cookie4() { cookie_mismatch_check inet ip eth 4 4; }
    tc_cookie_mismatch_v3_inet_ip_cookie8() { cookie_mismatch_check inet ip eth 8 8; }
    tc_cookie_mismatch_v3_inet_ip_no_peer_cookie() { cookie_mismatch_check inet ip eth 0 4; }

    tc_data_shutdown_v2_inet_udp_ppp() { data_shutdown_check 2 inet udp ppp; }

    tc_data_shutdown_v3_inet_udp_ppp() { data_shutdown_check 3 inet udp ppp; }
    tc_data_shutdown_v3_inet_ip_ppp() { data_shutdown_check 3 inet ip ppp; }
    tc_data_shutdown_v3_inet_udp_eth() { data_shutdown_check 3 inet udp eth; }
    tc_data_shutdown_v3_inet_ip_eth() { data_shutdown_check 3 inet ip eth; }

    if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
    then
        tc_ac_pppoe_v2_inet_udp() { ac_pppoe_data_check 2 inet udp; }
        tc_ac_pppoe_v3_inet_udp() { ac_pppoe_data_check 3 inet udp; }
        tc_ac_pppoe_v3_inet_ip() { ac_pppoe_data_check 3 inet ip; }
    fi

    # Datapath tests require ip addr add <local-addr> peer <peer-addr> support
    if test $HAVE_IPV6_PEER -eq 1
    then
        tc_data_v2_inet6_udp_ppp() { session_data_check 2 inet6 udp ppp 0; }

        tc_data_v3_inet6_udp_ppp() { session_data_check 3 inet6 udp ppp 0; }
        tc_data_v3_inet6_udp_ppp_cookie4() { session_data_check 3 inet6 udp ppp 4; }
        tc_data_v3_inet6_udp_ppp_cookie8() { session_data_check 3 inet6 udp ppp 8; }

        tc_data_v3_inet6_udp_eth() { session_data_check 3 inet6 udp eth 0; }
        tc_data_v3_inet6_udp_eth_cookie4() { session_data_check 3 inet6 udp eth 4; }
        tc_data_v3_inet6_udp_eth_cookie8() { session_data_check 3 inet6 udp eth 8; }

        tc_cookie_mismatch_v3_inet6_udp_cookie4() { cookie_mismatch_check inet6 udp eth 4 4; }
        tc_cookie_mismatch_v3_inet6_udp_cookie8() { cookie_mismatch_check inet6 udp eth 8 8; }
        tc_cookie_mismatch_v3_inet6_udp_no_peer_cookie() { cookie_mismatch_check inet6 udp eth 0 4; }

        tc_data_shutdown_v2_inet6_udp_ppp() { data_shutdown_check 2 inet6 udp ppp; }

        tc_data_shutdown_v3_inet6_udp_ppp() { data_shutdown_check 3 inet6 udp ppp; }
        tc_data_shutdown_v3_inet6_udp_eth() { data_shutdown_check 3 inet6 udp eth; }

        if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
        then
            tc_ac_pppoe_v2_inet6_udp() { ac_pppoe_data_check 2 inet6 udp; }
            tc_ac_pppoe_v3_inet6_udp() { ac_pppoe_data_check 3 inet6 udp; }
        fi

        if test $HAVE_L2TPIP_IPV6 -eq 1
        then
            tc_data_v3_inet6_ip_ppp() { session_data_check 3 inet6 ip ppp 0; }
            tc_data_v3_inet6_ip_ppp_cookie4() { session_data_check 3 inet6 ip ppp 4; }
            tc_data_v3_inet6_ip_ppp_cookie8() { session_data_check 3 inet6 ip ppp 8; }

            tc_data_v3_inet6_ip_eth() { session_data_check 3 inet6 ip eth 0; }
            tc_data_v3_inet6_ip_eth_cookie4() { session_data_check 3 inet6 ip eth 4; }
            tc_data_v3_inet6_ip_eth_cookie8() { session_data_check 3 inet6 ip eth 8; }

            tc_cookie_mismatch_v3_inet6_ip_cookie4() { cookie_mismatch_check inet6 ip eth 4 4; }
            tc_cookie_mismatch_v3_inet6_ip_cookie8() { cookie_mismatch_check inet6 ip eth 8 8; }
            tc_cookie_mismatch_v3_inet6_ip_no_peer_cookie() { cookie_mismatch_check inet6 ip eth 0 4; }
    
            tc_data_shutdown_v3_inet6_ip_ppp() { data_shutdown_check 3 inet6 ip ppp; }
            tc_data_shutdown_v3_inet6_ip_eth() { data_shutdown_check 3 inet6 ip eth; }

            if test $HAVE_PPP_CHANNEL_BRIDGE -eq 1
            then
                tc_ac_pppoe_v3_inet6_ip() { ac_pppoe_data_check 3 inet6 ip; }
            fi
        fi
    fi

    tc_data_perf_v2_inet_udp_ppp() { data_perf_check 2 inet udp ppp; }
    tc_data_perf_v3_inet_udp_ppp() { data_perf_check 3 inet udp ppp; }
    tc_data_perf_v3_inet_udp_eth() { data_perf_check 3 inet udp eth; }
    tc_data_perf_v3_inet_ip_eth() { data_perf_check 3 inet ip eth; }
    tc_data_perf_v2_inet_udp_ppp_tunnels() { data_perf_check 2 inet udp ppp tunnels; }
    tc_data_perf_v2_inet_udp_ppp_sessions() { data_perf_check 2 inet udp ppp sessions; }
    tc_data_perf_v2_inet_udp_ppp_both() { data_perf_check 2 inet udp ppp both; }
    tc_data_perf_v3_inet_udp_eth_tunnels() { data_perf_check 3 inet udp eth tunnels; }
    tc_data_perf_v3_inet_ip_eth_tunnels() { data_perf_check 3 inet ip eth tunnels; }
    tc_data_perf_v3_inet_udp_eth_sessions() { data_perf_check 3 inet udp eth sessions; }
    tc_data_perf_v3_inet_ip_eth_sessions() { data_perf_check 3 inet ip eth sessions; }
    tc_data_perf_v3_inet_udp_eth_both() { data_perf_check 3 inet udp eth both; }
    tc_data_perf_v3_inet_ip_eth_both() { data_perf_check 3 inet ip eth both; }
    if test $HAVE_IPV6_PEER -eq 1
    then
        tc_data_perf_v2_inet6_udp_ppp() { data_perf_check 2 inet6 udp ppp; }
        tc_data_perf_v3_inet6_udp_ppp() { data_perf_check 3 inet6 udp ppp; }
        tc_data_perf_v3_inet6_udp_eth() { data_perf_check 3 inet6 udp eth; }
        tc_data_perf_v3_inet6_ip_eth() { data_perf_check 3 inet6 ip eth; }
    fi

fi

# Tunnel and session ID scope tests
tc_scope_tunnel_id() {
    scope_tunnel_id_check 2 2 udp udp
    scope_tunnel_id_check 2 3 udp udp
    scope_tunnel_id_check 2 3 udp ip
    scope_tunnel_id_check 3 2 udp udp
    scope_tunnel_id_check 3 3 udp udp
    scope_tunnel_id_check 3 3 ip ip
    scope_tunnel_id_check 3 3 ip udp
    scope_tunnel_id_check 3 3 udp ip
}
tc_scope_session_id() {
    scope_session_id_check 2 2 udp udp
    scope_session_id_check 2 3 udp udp
    scope_session_id_check 2 3 udp ip
    scope_session_id_check 3 2 udp udp
    scope_session_id_check 3 3 udp udp
    scope_session_id_check 3 3 ip ip
    scope_session_id_check 3 3 ip udp
    scope_session_id_check 3 3 udp ip
}

# Datapath sequence number checks are agnostic to the pseudowire type and socket
# address family, and hence are all handled by a single test application which covers
# L2TPv2 and L2TPv3 sessions
tc_data_seqnum()
{
    check $(dirname $0)/seqnum
}

kmodrefleak_final_check()
{
    local ret=0
    kmodrefleak_check force || ret=1
    return $ret
}

show_usage()
{
    cat << __EOF__
    Name:   $(basename $0)
    Desc:   A unit and test suite for the Linux kernel L2TP code
    Usage:  $(basename $0) [options]
        -h  print this usage information
        -l  list available tests
        -k  enable kmemleak checking
        -m  enable kernel module refcount leak checking
        -e  exit on first test failure
        -t  specify testcases to run (e.g. -t "tc_api_v3_ip_inet_ppp tc_api_v3_ip_inet6_ppp")
        -v  log verbose debug
__EOF__
}

show_tests()
{
    local tc=
    local c=0
    echo "Available testcases:"
    for tc in $TESTCASES
    do
        c=$((c+1))
        echo "   testcase $c : $tc"
    done
}

#
# Entry point
#
TESTCASES=$(compgen -A function | grep ^tc_)

while getopts "hlkmevt:" opt
do
    case $opt in
    h) show_usage; exit 0;;
    l) show_tests; exit 0;;
    k) DO_KMEMLEAK_CHECK=1;;
    m) DO_KMODREFLEAK_CHECK=1;;
    e) EXIT_ON_FIRST_ERROR=1;;
    v) VERBOSE=1;;
    t) TESTCASES=$OPTARG;;
    ?) exit 1;;
    esac
done

if test 1 -eq $DO_KMEMLEAK_CHECK
then
    test -f $KMEMLEAK || log "WARNING: kernel mem leak checks disabled: $KMEMLEAK not present"
fi

if test "root" != $(whoami)
then
    log "Root capabilities are required to run the test suite!"
    exit 1
fi

# Load modules prior to running tests.
# Although the L2TP subsystem supports module autoloading, the module
# reference leak detection expects all modules to be loaded prior to
# startup so it can use a simple diff approach to detect module reference
# count changes.
l2tp_modules="l2tp_core l2tp_ip l2tp_ip6 l2tp_eth l2tp_ppp l2tp_netlink"
for m in $l2tp_modules
do
    modprobe $m
done

# If kmodrefleak isn't enabled, set it up so that
# kmodrefleak_final_check reports any leaks after running all other
# tests.
if test 0 -eq $DO_KMODREFLEAK_CHECK
then
    kmodrefleak_setup force
fi

ntests=0
nfails=0
for tc in $TESTCASES
do
    ntests=$((ntests+1))
    log "testcase $ntests : $tc"
    check_fail=$CHECK_FAIL
    runtest $tc
    if test $? -ne 0 || test $CHECK_FAIL -ne $check_fail
    then
        err "testcase $tc FAILED"
        nfails=$((nfails+1))
    else
        log "testcase $ntests : ok"
    fi
done

if test 0 -eq $DO_KMODREFLEAK_CHECK -a 0 -eq $nfails
then
    kmodrefleak_final_check || cat << EOF

l2tp kernel module refcount leaks detected.
Rerun with -m to enable leak checks per test to help diagnose the problem.

EOF
fi

report_and_exit $ntests $CHECK_COUNT $nfails 0
